{"version":3,"file":"static/js/688.a3c99621.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://goit-react-hw-08-phonebook/./src/components/AddContact/AddContact.module.css?e55c","components/AddContact/AddContact.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","hooks/useShowModal.js","components/Contact/Contact.jsx","pages/ContactsPage.js"],"sourcesContent":["export const getFilter = state => state.filter;\n\nexport const getContacts = state => state.contacts;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"delIcon\":\"ContactList_delIcon__ZhlTn\",\"contactLogo\":\"ContactList_contactLogo__J70QY\",\"contactName\":\"ContactList_contactName__wLcl6\",\"contactPhone\":\"ContactList_contactPhone__b7MFx\"};","import css from './ContactList.module.css';\nimport { FaTrash, FaUserAlt } from 'react-icons/fa';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { deleteContact } from 'redux/contacts/contacts-operation';\nimport { getContacts, getFilter } from 'redux/contacts/contacts-selectors';\n\nconst ContactList = () => {\n  const { items } = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const filtredContacts = () => {\n    if (!filter) {\n      return items;\n    }\n\n    const normalizedFilter = filter.toLowerCase();\n    return (\n      items &&\n      items.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter),\n      )\n    );\n  };\n\n  const filteredContactList = filtredContacts();\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContactList.map(({ id, name, number }) => (\n        <li key={nanoid()} className={css.contactItem}>\n          <FaUserAlt className={css.contactLogo} />\n          <p className={css.contactName}>{name}</p>\n          <p className={css.contactPhone}>{number}</p>\n          <FaTrash\n            className={css.delIcon}\n            onClick={() => dispatch(deleteContact(id))}\n          ></FaTrash>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport css from './ContactForm.module.css';\nimport { addContact } from 'redux/contacts/contacts-operation';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\n\nexport default function ContactForm({ onClose }) {\n  const { items } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const name = e.currentTarget.elements.name.value;\n    const number = e.currentTarget.elements.number.value;\n\n    const newContact = items.some(contact => {\n      return contact.name === name;\n    });\n    if (!newContact) {\n      dispatch(addContact({ name, number }));\n      Notify.success(`The ${name} has been added to your contact list.`);\n      onClose();\n    } else {\n      Report.warning(\n        `${name}`,\n        'This user is already in the contact list.',\n        'Close',\n      );\n    }\n  };\n\n  const contactSchema = yup.object({\n    name: yup.string().required().min(3).max(30),\n    number: yup.number().required(),\n  });\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={contactSchema}\n    >\n      {({ values, handleChange }) => (\n        <Form className={css.form} onSubmit={handleSubmit}>\n          <label className={css.label}>\n            <span className={css.title}>Name</span>\n            <Field\n              className={css.input}\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              value={values.name}\n            />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </label>\n          <label className={css.label}>\n            <span className={css.title}>Number</span>\n            <Field\n              className={css.input}\n              type=\"tel\"\n              name=\"number\"\n              onChange={handleChange}\n              value={values.number}\n            />\n            <ErrorMessage name=\"number\" component=\"div\" />\n          </label>\n          <button className={css.button} type=\"submit\">\n            Add\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nContactForm.propTypes = {\n  onClose: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"modalBackdrop\":\"Modal_modalBackdrop__Lq6oj\",\"modalContent\":\"Modal_modalContent__axM59\",\"buttonClose\":\"Modal_buttonClose__5LpkD\",\"svg\":\"Modal_svg__Kt273\"};","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport css from './Modal.module.css';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ children, onClose }) {\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [onClose]);\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <div className={css.modalBackdrop} onClick={handleBackdropClick}>\n      <div className={css.modalContent}>\n        {children}\n        <button className={css.buttonClose} type=\"button\" onClick={onClose}>\n          <AiOutlineCloseCircle className={css.svg} />\n        </button>\n      </div>\n    </div>,\n    modalRoot,\n  );\n}\n\nModal.propTypes = {\n  children: PropTypes.element,\n  onClose: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"headerBtn\":\"AddContact_headerBtn__Ok-Ic\"};","import { useState } from 'react';\nimport { BsFillPersonPlusFill } from 'react-icons/bs';\nimport Modal from 'components/Modal';\nimport ContactForm from 'components/ContactForm';\nimport css from './AddContact.module.css';\n\n\nexport const Addcontact = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => setShowModal(prevShowModal => !prevShowModal);\n\n  return (\n    <div>\n      <button className={css.headerBtn} type=\"button\" onClick={toggleModal}>\n        <p>Add new contact</p>\n        <BsFillPersonPlusFill size={20} />\n      </button>\n\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <ContactForm onClose={toggleModal} />\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default Addcontact;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterText\":\"Filter_filterText__QGy-k\"};","import { useDispatch, useSelector } from 'react-redux';\nimport css from './Filter.module.css';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\nimport { changeFilter } from 'redux/contacts/filter-slice';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const changeFieldFilter = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n\n  return (\n    <label className={css.filterLabel}>\n      <p className={css.filterTitle}>Find contacts by name</p>\n      <input\n        type=\"text\"\n        className={css.filterText}\n        onChange={changeFieldFilter}\n        value={filter}\n      />\n    </label>\n  );\n}\n","import { useState } from \"react\";\n\nfunction useShowModal(option) {\n  const [showModal, setShowModal] = useState(option);\n  const toggleModal = () => setShowModal(prevState => !prevState);\n\n  return { toggleModal, showModal };\n}\n\nexport default useShowModal;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts-operation';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm';\nimport AddContact from 'components/AddContact';\nimport Filter from 'components/Filter';\nimport Modal from 'components/Modal';\nimport Loader from 'components/Loader';\nimport useShowModal from 'hooks/useShowModal';\n\nconst Contact = ({ id }) => {\n  const { showModal, toggleModal } = useShowModal(false);\n  const dispatch = useDispatch();\n  const { items } = useSelector(getContacts);\n  const { isLoading } = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <ContactForm />\n        </Modal>\n      )}\n\n      <AddContact />\n      {items.length > 0 ? (\n        <div>\n          <Filter />\n          {isLoading ? <Loader /> : <ContactList />}\n        </div>\n      ) : (\n        <p>Contact List is empty...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Contact;\n","import Contact from 'components/Contact';\n\nconst ContactPage = () => {\n  return (\n    <div>\n      <Contact />\n    </div>\n  );\n};\n\nexport default ContactPage;\n"],"names":["getFilter","state","filter","getContacts","contacts","items","useSelector","dispatch","useDispatch","filteredContactList","normalizedFilter","toLowerCase","contact","name","includes","filtredContacts","className","css","map","id","number","onClick","deleteContact","nanoid","ContactForm","onClose","handleSubmit","e","preventDefault","currentTarget","elements","value","some","Report","addContact","Notify","contactSchema","yup","required","min","max","initialValues","onSubmit","validationSchema","values","handleChange","type","onChange","component","modalRoot","document","querySelector","Modal","children","useEffect","handleKeyDown","code","window","addEventListener","removeEventListener","createPortal","target","useState","showModal","setShowModal","toggleModal","prevShowModal","size","Filter","changeFilter","option","prevState","useShowModal","isLoading","fetchContacts","AddContact","length","Loader"],"sourceRoot":""}